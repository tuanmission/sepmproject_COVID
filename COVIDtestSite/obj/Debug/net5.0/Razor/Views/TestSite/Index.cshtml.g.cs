#pragma checksum "C:\Users\tuanm\Documents\Software Engineering Project Management\COVIDtestSite\COVIDtestSite\Views\TestSite\Index.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "99c591341bfbedc4acbc0f984022be41d6580b70"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Views_TestSite_Index), @"mvc.1.0.view", @"/Views/TestSite/Index.cshtml")]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#nullable restore
#line 1 "C:\Users\tuanm\Documents\Software Engineering Project Management\COVIDtestSite\COVIDtestSite\Views\_ViewImports.cshtml"
using COVIDtestSite;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "C:\Users\tuanm\Documents\Software Engineering Project Management\COVIDtestSite\COVIDtestSite\Views\_ViewImports.cshtml"
using COVIDtestSite.Models;

#line default
#line hidden
#nullable disable
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"99c591341bfbedc4acbc0f984022be41d6580b70", @"/Views/TestSite/Index.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"bf17ed8497d753c7a4604f84c8ac4a2ebff4f042", @"/Views/_ViewImports.cshtml")]
    public class Views_TestSite_Index : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<dynamic>
    {
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
            WriteLiteral("\r\n");
#nullable restore
#line 2 "C:\Users\tuanm\Documents\Software Engineering Project Management\COVIDtestSite\COVIDtestSite\Views\TestSite\Index.cshtml"
  
    ViewData["Title"] = "Index";
    Layout = "~/Views/Shared/_Layout.cshtml";

#line default
#line hidden
#nullable disable
            WriteLiteral(@"
<h1>Index</h1>

    <div class=""table-responsive"">
        <table class=""table table-hover"" id=""testtable"">
            <thead class=""thead-dark"">
                <tr>
                    <th scope=""col"">Name</th>
                    <th scope=""col"">Address</th>
                    <th scope=""col"">Test Site Type</th>
                    <th scope=""col"">View Details</th>
                </tr>

            </thead>
            <tbody>
                <tr></tr>
            </tbody>

        </table>
    </div>
<br>

<h1 class=""text-center"">Test Site Map</h1>

<div class=""row"">
    <div id=""map"" style=""width: 100%; height: 300px"" >

    </div>
</div>
<div class=""row"">
    <div class=""col-md-2 float-md-right"" id=""currentlocationdiv"">

    </div>
    <div id=""error""></div>
</div>




");
            DefineSection("Scripts", async() => {
                WriteLiteral(@"
    <script>
        $(document).ready(function () {
            
            var table = $(""#testtable"").DataTable({
                ajax: {

                    url: ""/api/TestSite/"",
                    dataSrc: """",

                },
                columns: [
                    {
                        data: ""testSiteName""
                    },
                    {
                        data: ""address""
                    },
                    {
                        data: ""testsiteType.typeName""

                    },
                    {

                        data: ""id"",
                        render: function (data) {
                            return ""<a href='/TestSite/details/"" + data + ""' class='btn btn-primary'>View Details</a>"";
                        }

                    }

                ]

            });

            
            
            
            
            document.getElementById('error').innerHTML = """";
            va");
                WriteLiteral(@"r lat = -37.81835264597926;
            var lon = 144.96380671984414;
            loadTestSitesonMap(lat, lon);

        });

        function loadTestSitesonMap(latitude, longitude) {
            $.ajax({
                type: ""GET"",
                url: ""/api/TestSite/"",
                dataType: ""json"",
            }).done(function (data) {

                var map = loadmap(latitude, longitude);

                for (var mapdata of data) {
                    var position = { lat: mapdata.latitude, lng: mapdata.longitude };
                    var params = { id: mapdata.id, waittime: mapdata.waitingTime, name: mapdata.testSiteName, address: mapdata.address };
                    addMarkers(position, map, params);
                }

                var centerdiv = document.getElementById('currentlocationdiv');
                centerdiv.innerHTML = `<button class=""btn btn-primary"" onclick=""currentLocation()"">Use my Location</button>`;


            }).fail(function () {
           ");
                WriteLiteral(@"     document.getElementById('error').innerHTML = ` <div class=""alert alert-danger"">Failed to Get Test Site Data</div>`;
            });
        }

        function loadmap(latitude, longitude) {
            var myLatLng = {
                lat: latitude,
                lng: longitude,
            };
            var mapProp = {
                center: new google.maps.LatLng(latitude, longitude),
                zoom: 15,
            };
            var map = new google.maps.Map(
                document.getElementById(""map""),
                mapProp
            );

            new google.maps.Marker({
                position: myLatLng,
                map,
                title: ""Hello World!"",
            });

            return map;
        }

        function addMarkers(pos, mp, params) {
           const marker= new google.maps.Marker({
                position: pos,
                map:mp,
                title: ""Hello World!"",
           });

            var windowStri");
                WriteLiteral(@"ng = `
          <h4>`+ params.name + `</h4>
          <p>`+ params.address + `</p>
          <p>Waiting Time: `+ params.waittime + `</p>
          <a href=""/TestSite/details/`+ params.id + `"" class=""btn btn-primary"">Details</a>
           `;
            const infowindow = new google.maps.InfoWindow({
                content: windowString,
            });

            marker.addListener(""click"", () => {
                infowindow.open({
                    anchor: marker,
                    map:mp,
                    shouldFocus: false,
                });
            });
        }

        function currentLocation() {
            var error = document.getElementById('error');
            error.innerHTML = """";
            if (navigator.geolocation) {
                navigator.geolocation.getCurrentPosition(centermap);
            } else {
               
                error.innerHTML = `<div class=""alert alert-danger"">Failed to Get current Position</div>`;
            }
        ");
                WriteLiteral(@"    
        }

        function centermap(position) {
           
            var longi = parseFloat(position.coords.longitude);
            var lati = parseFloat(position.coords.latitude);
            var mapProp = {
                center: new google.maps.LatLng(lati, longi),
                zoom: 15,
            };
            var map = new google.maps.Map(
                document.getElementById(""map""),
                mapProp
            );

            new google.maps.Marker({
                position: new google.maps.LatLng(lati, longi),
                map,
                title: ""Hello World!"",
            });
            $.ajax({
                type: ""GET"",
                url: ""/api/TestSite/"",
                dataType: ""json"",
            }).done(function (data) {


                for (var mapdata of data) {
                    var position = { lat: mapdata.latitude, lng: mapdata.longitude };
                    var params = { id: mapdata.id, waittime: mapdata.wait");
                WriteLiteral(@"ingTime, name: mapdata.testSiteName, address: mapdata.address };
                    addMarkers(position, map, params);
                }

                

            }).fail(function () {
                document.getElementById('error').innerHTML = ` <div class=""alert alert-danger"">Failed to Get Test Site Data</div>`;
            });
            
            
        }
            
            
            
            
            
            
            
      

        

    </script>

");
            }
            );
            WriteLiteral("\r\n");
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<dynamic> Html { get; private set; }
    }
}
#pragma warning restore 1591
